{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","movie/model/movie_model.tsx","movie/components/UpdatingIndicator.tsx","movie/components/MovieCard.tsx","movie/components/MovieBoard.tsx","movie/index.tsx"],"names":["asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","MovieModel","liveQuery","subscribe","init","query","LC","Query","find","movies","model","map","movie","db2model","on","newItem","updating","push","item","movieItem","index","indexOf","splice","unSubscribe","unsubscribe","makeObservable","applicationId","applicationKey","appId","decrypt","process","appKey","record","id","get","poster","year","released","runtime","genre","director","writer","actors","plot","language","country","awards","imdb","douban","rottenTomatoes","rating","title","ref","observable","action","a","MovieDB","Object","extend","movieDB","set","save","createWithoutData","destroy","computed","movieModel","MovieModelContext","React","createContext","UpdatingIndicator","observer","useContext","isUpdating","MovieCard","prop","style","border","src","alt","MovieBoard","display","gridTemplateColumns","gap","padding","MovieApp","useEffect","Provider"],"mappings":"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","file":"static/js/7.70de8106.chunk.js","sourcesContent":["function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","import { action, computed, makeObservable, observable } from \"mobx\";\nimport React from \"react\";\nimport LC from 'leanengine';\nimport { decrypt } from \"../../login/auth\";\n\nexport default class MovieModel {\n  @observable\n  private model: Array<MoviewithRef> = [];\n\n  @observable\n  private updating: boolean = false;\n\n  private liveQuery!: LC.LiveQuery<LC.Queriable>;\n\n  constructor() {\n    makeObservable(this);\n    if (LC.applicationId === undefined || LC.applicationKey === undefined) {\n      LC.init({\n        appId: decrypt(process.env.REACT_APP_LEAN_MOVIE_ID),\n        appKey: decrypt(process.env.REACT_APP_LEAN_MOVIE_KEY),\n      });\n    }\n  }\n\n  subscribe = (init = true) => {\n    const query = new LC.Query('Movie');\n    if (init) {\n      query.find().then(movies => {\n        this.model = movies.map(movie => this.db2model(movie))\n      });\n    }\n    query.subscribe().then(liveQuery => {\n      this.liveQuery = liveQuery;\n      liveQuery.on('create', (newItem) => {\n        if (newItem !== undefined) {\n          const movie = this.db2model(newItem);\n          this.updating = false;\n          this.model.push(movie);\n        }\n      });\n      liveQuery.on('update', (item) => {\n        if (item !== undefined) {\n          const movieItem = this.db2model(item);\n          const index = this.model.indexOf(movieItem);\n          if (index > -1) {\n            this.model[index] = movieItem;\n          }\n        }\n      })\n      liveQuery.on('delete', (item) => {\n        if (item !== undefined) {\n          const index = this.model.indexOf(this.db2model(item));\n          if (index > -1) {\n            this.model.splice(index, 1);\n          }\n        }\n      });\n    });\n  }\n\n  unSubscribe = () => {\n    this.liveQuery?.unsubscribe();\n  }\n\n  private db2model(record: LC.Queriable): MoviewithRef {\n    return {\n      id: record.get('id') as string,\n      poster: record.get('poster') as string,\n      year: record.get('year') as number,\n      released: record.get('released') as string,\n      runtime: record.get('runtime') as number,\n      genre: record.get('genre') as string,\n      director: record.get('director') as string,\n      writer: record.get('writer') as string,\n      actors: record.get('actors') as string,\n      plot: record.get('plot') as string,\n      language: record.get('language') as string,\n      country: record.get('country') as string,\n      awards: record.get('awards') as string,\n      imdb: record.get('imdbd') as number,\n      douban: record.get('douban') as number,\n      rottenTomatoes: record.get('rottenTomatoes') as number,\n      rating: record.get('rating') as number,\n      title: record.get('title') as string,\n      ref: record.get('objectId') as string,\n    };\n  }\n\n  @action\n  create = async (movie: Movie) => {\n    this.updating = true;\n    const MovieDB = LC.Object.extend('Movie');\n    const movieDB = new MovieDB();\n    movieDB.set('id', movie.id);\n    movieDB.set('poster', movie.poster);\n    movieDB.set('year', movie.year);\n    movieDB.set('released', movie.released);\n    movieDB.set('runtime', movie.runtime);\n    movieDB.set('genre', movie.genre);\n    movieDB.set('director', movie.director);\n    movieDB.set('writer', movie.writer);\n    movieDB.set('actors', movie.actors);\n    movieDB.set('plot', movie.plot);\n    movieDB.set('language', movie.language);\n    movieDB.set('country', movie.country);\n    movieDB.set('awards', movie.awards);\n    movieDB.set('imdb', movie.imdb);\n    movieDB.set('douban', movie.douban);\n    movieDB.set('rottenTomatoes', movie.rottenTomatoes);\n    movieDB.set('rating', movie.rating);\n    movieDB.set('title', movie.title);\n    return movieDB.save();\n  }\n\n  @action\n  delete = (id: string) => {\n    this.updating = true;\n    const movieDB = LC.Object.createWithoutData('Movie', id);\n    movieDB.destroy();\n  }\n\n  @computed get movies() {\n    return this.model;\n  }\n\n  @computed get isUpdating() {\n    return this.updating;\n  }\n\n}\n\nexport interface Movie {\n  id: string;\n\n  poster: string;\n\n  year: number;\n\n  released: string;\n\n  runtime: number;\n\n  genre: string;\n\n  director: string;\n\n  writer: string;\n\n  actors: string;\n\n  plot: string;\n\n  language: string;\n\n  country: string;\n\n  awards: string;\n\n  imdb: number;\n\n  douban?: number;\n\n  rottenTomatoes: number;\n\n  rating?: number;\n\n  title: string;\n}\n\ninterface MoviewithRef extends Movie {\n  ref: string;\n}\n\nconst movieModel = new MovieModel();\nexport const MovieModelContext = React.createContext<MovieModel>(movieModel);\n","import { observer } from \"mobx-react-lite\";\nimport React, { useContext } from \"react\";\nimport { MovieModelContext } from \"../model/movie_model\";\n\nconst UpdatingIndicator = observer(() => {\n  const movieModel = useContext(MovieModelContext);\n  if (movieModel.isUpdating) {\n    return <p>Updating...</p>\n  } else {\n    return null;\n  }\n})\n\nexport default UpdatingIndicator;","import React from \"react\";\nimport { Movie } from \"../model/movie_model\";\n\ninterface MovieCardProp {\n  movie: Movie\n}\n\nconst MovieCard = (prop: MovieCardProp) => {\n  return (\n    <div style={{ border: '1px solid' }}>\n      <img\n        src={prop.movie.poster}\n        alt={prop.movie.title}\n      />\n      <p> {prop.movie.title} </p>\n    </div>\n  );\n}\n\nexport default MovieCard","import React, { useContext } from 'react';\nimport { MovieModelContext } from '../model/movie_model';\nimport { observer } from 'mobx-react-lite';\nimport MovieCard from './MovieCard';\n\nconst MovieBoard = observer(() => {\n  const movieModel = useContext(MovieModelContext);\n\n  return (\n    <div style={{ display: 'grid', gridTemplateColumns: `repeat(5, 1fr)`, gap: 20, padding: 10 }}>\n      {movieModel.movies.map(\n        movie => <MovieCard movie={movie} key={movie.id} />\n      )}\n    </div>\n  );\n})\n\nexport default MovieBoard","import React, { useEffect } from 'react';\nimport MovieModel, { MovieModelContext } from './model/movie_model';\nimport UpdatingIndicator from './components/UpdatingIndicator'\nimport MovieBoard from './components/MovieBoard'\n\nfunction MovieApp() {\n\n  const movieModel = new MovieModel();\n\n  useEffect(() => {\n    movieModel.subscribe();\n    return () => {\n      movieModel.unSubscribe();\n    };\n  })\n\n  return (\n    <MovieModelContext.Provider value={movieModel}>\n      <MovieBoard />\n      <UpdatingIndicator />\n    </MovieModelContext.Provider>\n  );\n}\n\nexport default MovieApp;\n"],"sourceRoot":""}