{"version":3,"sources":["serviceWorkerRegistration.ts","reportWebVitals.ts","App.tsx","index.tsx","login/AuthModel.tsx"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Home","lazy","MovieApp","Calculator","AirBoxApp","Login","App","authModel","AuthModel","Provider","value","Header","fallback","exact","path","component","PrivateRoute","useStyles","makeStyles","createStyles","header","backgroundColor","padding","navtab","color","fontSize","textDecoration","classes","className","to","props","auth","useContext","AuthProvider","useLocation","isLogged","render","pathname","ReactDOM","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration","authenticate","key","CryptoJS","AES","decrypt","toString","enc","Utf8","makeObservable","this","initKey","localStorage","getItem","length","logged","action","observable","computed","setItem","removeItem","React","createContext"],"mappings":"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","file":"static/js/main.86a181da.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { lazy, Suspense, useContext } from \"react\";\nimport { NavLink, Redirect, Route, Switch, useLocation } from \"react-router-dom\";\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\nimport createStyles from \"@material-ui/core/styles/createStyles\";\nimport AuthModel, { AuthProvider } from './login/AuthModel'\n\nconst Home = lazy(() => import('./home'));\nconst MovieApp = lazy(() => import('./movie'));\nconst Calculator = lazy(() => import('./calculator'));\nconst AirBoxApp = lazy(() => import('./airbox'));\nconst Login = lazy(() => import('./login'));\n\nexport default function App() {\n  const authModel = new AuthModel();\n  return (\n    <>\n      <AuthProvider.Provider value={authModel}>\n        <Header />\n        <Suspense fallback={<div>Loading...</div>}>\n          <Switch>\n            <Route exact path=\"/\" component={Home} />\n            <Route path=\"/login\" component={Login} />\n            <Route path=\"/calc\" component={Calculator} />\n            <PrivateRoute path=\"/movie\" component={MovieApp} />\n            <PrivateRoute path=\"/airbox\" component={AirBoxApp} />\n          </Switch>\n        </Suspense>\n      </AuthProvider.Provider>\n    </>\n  );\n}\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    header: {\n      backgroundColor: '#1b1c1d',\n      padding: 8,\n    },\n    navtab: {\n      color: 'white',\n      fontSize: 20,\n      textDecoration: 'none',\n      padding: 8,\n    },\n  }),\n);\n\nfunction Header() {\n  const classes = useStyles();\n  return (\n    <nav className={classes.header}>\n      <NavLink className={classes.navtab} to='/'>Home</NavLink>\n      <NavLink className={classes.navtab} to='/calc'>Calc</NavLink>\n      <NavLink className={classes.navtab} to='/movie'>Movie</NavLink>\n      <NavLink className={classes.navtab} to='/airbox'>AirBox</NavLink>\n    </nav>\n  )\n}\n\ninterface PrivateRouteProp {\n  path: string,\n  component: React.ComponentType,\n}\n\nfunction PrivateRoute(props: PrivateRouteProp) {\n  let auth = useContext(AuthProvider);\n  const location = useLocation();\n  if (auth.isLogged) {\n    return (<Route path={props.path} component={props.component} />);\n  } else {\n    return (<Route path={props.path} render={() => <Redirect to={{ pathname: \"/login\", state: location.pathname }} />} />);\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App/>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorkerRegistration.register();\n\nreportWebVitals();\n","import { action, computed, makeObservable, observable } from \"mobx\";\nimport React from \"react\";\nimport CryptoJS from 'crypto-js';\n\nexport default class AuthModel {\n  constructor() {\n    makeObservable(this);\n    this.initKey();\n  }\n\n  @action\n  private initKey() {\n    const key = localStorage.getItem('private key')\n    if (key && key.length !== 0 && this.authenticate(key)) {\n      this.logged = true;\n    }\n    return this.logged;\n  }\n\n  @observable private logged = false;\n\n  @computed\n  get isLogged() {\n    return this.logged;\n  }\n\n  @action\n  login = (key: string) => {\n    if (this.authenticate(key)) {\n      localStorage.setItem('private key', key);\n      this.logged = true;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  private authenticate = (key: string) => {\n    const cipher = 'U2FsdGVkX188/AO4D/R1RFTPjxyveU/Y+6jmDIbN4fYatwhuTXYU0yBUO5DwXVzx';\n    const text = CryptoJS.AES.decrypt(cipher, key).toString(CryptoJS.enc.Utf8)\n    return text === 'Hello, React&App'\n  };\n\n  @action\n  logout = () => {\n    localStorage.removeItem('private key');\n    this.logged = false;\n  }\n}\n\nconst authModel = new AuthModel();\nexport const AuthProvider = React.createContext(authModel);\n\n"],"sourceRoot":""}