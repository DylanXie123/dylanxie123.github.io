{"version":3,"sources":["login/auth.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","App.tsx","index.tsx"],"names":["authenticate","key","AES","decrypt","toString","Utf8Encode","haveKey","localStorage","getItem","length","setKey","setItem","cipher","Error","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Home","lazy","MovieApp","Calculator","AirBoxApp","Login","App","Header","fallback","exact","path","render","defaultComponent","linkStyle","color","fontSize","textDecoration","padding","style","backgroundColor","to","RedirectRoute","props","useLocation","pathname","ReactDOM","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.20aa0a8f.chunk.js","sourcesContent":["import AES from 'crypto-js/aes';\nimport Utf8Encode from 'crypto-js/enc-utf8';\n\nexport const authenticate = (key: string) => {\n  const cipher = 'U2FsdGVkX188/AO4D/R1RFTPjxyveU/Y+6jmDIbN4fYatwhuTXYU0yBUO5DwXVzx';\n  const text = AES.decrypt(cipher, key).toString(Utf8Encode)\n  return text === 'Hello, React&App'\n};\n\nexport const haveKey = () => {\n  const key = localStorage.getItem('private key')\n  if (key && key.length !== 0 && authenticate(key)) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nexport const setKey = (key: string) => {\n  if (authenticate(key)) {\n    localStorage.setItem('private key', key);\n    return true;\n  } else {\n    return false;\n  }\n}\n\nexport const decrypt = (cipher: string | undefined) => {\n  const key = localStorage.getItem('private key');\n  if (!key || key.length === 0 || !cipher || cipher.length === 0) {\n    throw Error(`decrypt ${cipher} failed`);\n  } else {\n    return AES.decrypt(cipher, key).toString(Utf8Encode)\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { lazy, Suspense } from \"react\";\nimport { NavLink, Redirect, Route, Switch, useLocation } from \"react-router-dom\";\nimport { haveKey } from \"./login/auth\";\n\nconst Home = lazy(() => import('./home'));\nconst MovieApp = lazy(() => import('./movie'));\nconst Calculator = lazy(() => import('./calculator'));\nconst AirBoxApp = lazy(() => import('./airbox'));\nconst Login = lazy(() => import('./login'));\n\nexport default function App() {\n  return (\n    <>\n      <Header />\n      <Suspense fallback={<div>Loading...</div>}>\n        <Switch>\n          <Route exact path=\"/\" render={() => <Home />} />\n          <Route path=\"/login\" render={() => <Login />} />\n          <Route path=\"/calc\" render={() => <Calculator />} />\n          <RedirectRoute path=\"/movie\" defaultComponent={MovieApp} />\n          <RedirectRoute path=\"/airbox\" defaultComponent={AirBoxApp} />\n        </Switch>\n      </Suspense>\n    </>\n  );\n}\n\nfunction Header() {\n  const linkStyle: React.CSSProperties = {\n    color: 'white',\n    fontSize: 20,\n    textDecoration: 'none',\n    padding: 8,\n  };\n  return (\n    <nav style={{ backgroundColor: '#1b1c1d', padding: 8 }}>\n      <NavLink style={linkStyle} to='/'>Home</NavLink>\n      <NavLink style={linkStyle} to='/calc'>Calc</NavLink>\n      <NavLink style={linkStyle} to='/movie'>Movie</NavLink>\n      <NavLink style={linkStyle} to='/airbox'>AirBox</NavLink>\n    </nav>\n  )\n}\n\ninterface RedirectRouteProp {\n  defaultComponent: React.ComponentType\n}\n\nconst RedirectRoute = (props: React.ComponentProps<typeof Route> & RedirectRouteProp) => {\n  const location = useLocation();\n\n  return (\n    <Route\n      {...props}\n      path={props.path}\n      render={() => {\n        return haveKey() ? <props.defaultComponent /> :\n          <Redirect to={{ pathname: \"/login\", state: location.pathname }} />\n      }}\n    />\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App/>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorkerRegistration.register();\n\nreportWebVitals();\n"],"sourceRoot":""}